var utils = require("utils/utils");
var platform = require("platform");
var navigator = require("../../common/navigator");
var effects_1 = require("../../common/effects");
var isAndroid = platform.device.os === platform.platformNames.android;
var OVERLAY_ELEVATION = 12;
var CURVE = (platform.device.os === platform.platformNames.android) ? new android.view.animation.AccelerateDecelerateInterpolator() : UIViewAnimationCurve.UIViewAnimationCurveEaseInOut;
function openDrawer(args) {
    var drawer = args.object.page.getViewById("example-menu-drawer");
    drawer.gesturesEnabled = true;
    drawer.showDrawer();
}
exports.openDrawer = openDrawer;
function closeDrawer(args) {
    var drawer = args.object.page.getViewById("example-menu-drawer");
    drawer.gesturesEnabled = false;
    drawer.closeDrawer();
}
exports.closeDrawer = closeDrawer;
function menuButtonLoaded(args) {
    var menuBackground = args.object.getViewById("menu-button-background");
    var timeFactor = isAndroid ? 0.4 : 0.6;
    var scaleFactor = function (s) { return 1 * 0.4 + s * 0.6; };
    var animateBackground = function (scale, opacity, duration) {
        if (duration === void 0) { duration = 120; }
        return function () { return menuBackground.animate({
            scale: { x: scaleFactor(scale), y: scaleFactor(scale) },
            opacity: opacity,
            duration: duration * timeFactor,
            curve: CURVE
        }); };
    };
    animateBackground(0, 0, 1)()
        .then(animateBackground(2, 0.2))
        .then(animateBackground(0.8, 0.4))
        .then(animateBackground(1.7, 0.6))
        .then(animateBackground(0.9, 0.8))
        .then(animateBackground(1.2, 1))
        .then(animateBackground(1, 1));
    var menuDots = args.object.getViewById("menu-button-dots");
    setTimeout(effects_1.loadedGuard(menuDots, function () { return menuDots.animate({
        translate: { x: 0, y: 0 },
        opacity: 1,
        duration: 500 * timeFactor,
        curve: CURVE
    }); }), 300);
    var title = args.object.getViewById("menu-button-title");
    setTimeout(effects_1.loadedGuard(title, function () { return title.animate({
        translate: { x: 0, y: 0 },
        opacity: 1,
        duration: 450 * timeFactor,
        curve: CURVE
    }); }), 430);
    var menuButton = args.object.getViewById("menu-button");
    if (args.object.android) {
        var compat = android.support.v4.view.ViewCompat;
        var baseElevation = OVERLAY_ELEVATION * utils.layout.getDisplayDensity() + 1000;
        var setElevation = function (view, elev) {
            compat.setElevation(view.android, elev);
        };
        setElevation(menuButton, 4 * utils.layout.getDisplayDensity() + 1);
        setElevation(menuBackground, baseElevation);
        setElevation(menuDots, baseElevation + 1);
        setElevation(title, baseElevation + 1);
    }
}
exports.menuButtonLoaded = menuButtonLoaded;
function drawerClosed(args) {
    var drawer = args.object;
    drawer.gesturesEnabled = false;
}
exports.drawerClosed = drawerClosed;
function drawerLoaded(args) {
    var drawer = args.object;
    drawer.gesturesEnabled = false;
    if (!drawer.autoCloseAssigned) {
        drawer.autoCloseAssigned = true;
        drawer.page.on("navigatedFrom", function (args) {
            drawer.closeDrawer();
        });
        if (drawer.ios) {
            drawer.ios.defaultSideDrawer.style.shadowMode = TKSideDrawerShadowMode.TKSideDrawerShadowModeSideDrawer;
            drawer.ios.defaultSideDrawer.style.dimOpacity = 0.3;
        }
    }
}
exports.drawerLoaded = drawerLoaded;
function backTap(args) {
    console.log("back");
    navigator.navigateBackFromExample();
}
exports.backTap = backTap;
function informationTap(args) {
    console.log("info");

}
exports.informationTap = informationTap;
function codeTap(args) {
    console.log("code");
}
exports.codeTap = codeTap;
function feedbackTap(args) {
    console.log("feedback");
}
exports.feedbackTap = feedbackTap;
function prevTap(args) {
    console.log("prev");
    navigator.navigateToPrevExample(args.object.bindingContext);
}
exports.prevTap = prevTap;
function nextTap(args) {
    console.log("prev");
    navigator.navigateToNextExample(args.object.bindingContext);
}
exports.nextTap = nextTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS1tZW51LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXhhbXBsZS1tZW51LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG1DQUFzQztBQUN0QyxtQ0FBc0M7QUFDdEMsK0NBQWlEO0FBQ2pELDZDQUFnRDtBQUdoRCxJQUFJLFNBQVMsR0FBWSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztBQUUvRSxJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLG9CQUFvQixDQUFDLDZCQUE2QixDQUFDO0FBRXpMLG9CQUEyQixJQUFJO0lBQzlCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzlCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNyQixDQUFDO0FBSkQsZ0NBSUM7QUFFRCxxQkFBNEIsSUFBSTtJQUMvQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNqRSxNQUFNLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUMvQixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdEIsQ0FBQztBQUpELGtDQUlDO0FBRUQsMEJBQWlDLElBQUk7SUFDcEMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUV2RSxJ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dXRpbHNcIik7XG5pbXBvcnQgcGxhdGZvcm0gPSByZXF1aXJlKFwicGxhdGZvcm1cIik7XG5pbXBvcnQgKiBhcyBuYXZpZ2F0b3IgZnJvbSBcIi4uL2NvbW1vbi9uYXZpZ2F0b3JcIjtcbmltcG9ydCB7IGxvYWRlZEd1YXJkIH0gZnJvbSBcIi4uL2NvbW1vbi9lZmZlY3RzXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xuXG52YXIgaXNBbmRyb2lkOiBib29sZWFuID0gcGxhdGZvcm0uZGV2aWNlLm9zID09PSBwbGF0Zm9ybS5wbGF0Zm9ybU5hbWVzLmFuZHJvaWQ7XG5cbnZhciBPVkVSTEFZX0VMRVZBVElPTiA9IDEyO1xudmFyIENVUlZFID0gKHBsYXRmb3JtLmRldmljZS5vcyA9PT0gcGxhdGZvcm0ucGxhdGZvcm1OYW1lcy5hbmRyb2lkKSA/IG5ldyBhbmRyb2lkLnZpZXcuYW5pbWF0aW9uLkFjY2VsZXJhdGVEZWNlbGVyYXRlSW50ZXJwb2xhdG9yKCkgOiBVSVZpZXdBbmltYXRpb25DdXJ2ZS5VSVZpZXdBbmltYXRpb25DdXJ2ZUVhc2VJbk91dDtcblxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5EcmF3ZXIoYXJncykge1xuXHR2YXIgZHJhd2VyID0gYXJncy5vYmplY3QucGFnZS5nZXRWaWV3QnlJZChcImV4YW1wbGUtbWVudS1kcmF3ZXJcIik7XG5cdGRyYXdlci5nZXN0dXJlc0VuYWJsZWQgPSB0cnVlO1xuXHRkcmF3ZXIuc2hvd0RyYXdlcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VEcmF3ZXIoYXJncykge1xuXHR2YXIgZHJhd2VyID0gYXJncy5vYmplY3QucGFnZS5nZXRWaWV3QnlJZChcImV4YW1wbGUtbWVudS1kcmF3ZXJcIik7XG5cdGRyYXdlci5nZXN0dXJlc0VuYWJsZWQgPSBmYWxzZTtcblx0ZHJhd2VyLmNsb3NlRHJhd2VyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW51QnV0dG9uTG9hZGVkKGFyZ3MpIHtcblx0dmFyIG1lbnVCYWNrZ3JvdW5kID0gYXJncy5vYmplY3QuZ2V0Vmlld0J5SWQoXCJtZW51LWJ1dHRvbi1iYWNrZ3JvdW5kXCIpO1xuXG5cdHZhciB0aW1lRmFjdG9yID0gaXNBbmRyb2lkID8gMC40IDogMC42O1xuXHR2YXIgc2NhbGVGYWN0b3IgPSAocykgPT4gMSAqIDAuNCArIHMgKiAwLjY7XG5cblx0dmFyIGFuaW1hdGVCYWNrZ3JvdW5kID0gKHNjYWxlLCBvcGFjaXR5LCBkdXJhdGlvbjogbnVtYmVyID0gMTIwKSA9PiAoKSA9PiBtZW51QmFja2dyb3VuZC5hbmltYXRlKHtcblx0XHRzY2FsZTogeyB4OiBzY2FsZUZhY3RvcihzY2FsZSksIHk6IHNjYWxlRmFjdG9yKHNjYWxlKSB9LFxuXHRcdG9wYWNpdHk6IG9wYWNpdHksXG5cdFx0ZHVyYXRpb246IGR1cmF0aW9uICogdGltZUZhY3Rvcixcblx0XHRjdXJ2ZTogQ1VSVkVcblx0fSk7XG5cblx0YW5pbWF0ZUJhY2tncm91bmQoMCwgMCwgMSkoKVxuXHRcdC50aGVuKGFuaW1hdGVCYWNrZ3JvdW5kKDIsIDAuMikpXG5cdFx0LnRoZW4oYW5pbWF0ZUJhY2tncm91bmQoMC44LCAwLjQpKVxuXHRcdC50aGVuKGFuaW1hdGVCYWNrZ3JvdW5kKDEuNywgMC42KSlcblx0XHQudGhlbihhbmltYXRlQmFja2dyb3VuZCgwLjksIDAuOCkpXG5cdFx0LnRoZW4oYW5pbWF0ZUJhY2tncm91bmQoMS4yLCAxKSlcblx0XHQudGhlbihhbmltYXRlQmFja2dyb3VuZCgxLCAxKSk7XG5cdFxuXHR2YXIgbWVudURvdHMgPSBhcmdzLm9iamVjdC5nZXRWaWV3QnlJZChcIm1lbnUtYnV0dG9uLWRvdHNcIik7XG5cdHNldFRpbWVvdXQobG9hZGVkR3VhcmQobWVudURvdHMsICgpID0+IG1lbnVEb3RzLmFuaW1hdGUoe1xuXHRcdHRyYW5zbGF0ZTogeyB4OiAwLCB5OiAwIH0sXG5cdFx0b3BhY2l0eTogMSxcblx0XHRkdXJhdGlvbjogNTAwICogdGltZUZhY3Rvcixcblx0XHRjdXJ2ZTogQ1VSVkVcblx0fSkpLCAzMDApO1xuXG5cdHZhciB0aXRsZSA9IGFyZ3Mub2JqZWN0LmdldFZpZXdCeUlkKFwibWVudS1idXR0b24tdGl0bGVcIik7XG5cdHNldFRpbWVvdXQobG9hZGVkR3VhcmQodGl0bGUsICgpID0+IHRpdGxlLmFuaW1hdGUoe1xuXHRcdHRyYW5zbGF0ZTogeyB4OiAwLCB5OiAwIH0sXG5cdFx0b3BhY2l0eTogMSxcblx0XHRkdXJhdGlvbjogNDUwICogdGltZUZhY3Rvcixcblx0XHRjdXJ2ZTogQ1VSVkVcblx0fSkpLCA0MzApO1xuXG5cdHZhciBtZW51QnV0dG9uID0gYXJncy5vYmplY3QuZ2V0Vmlld0J5SWQoXCJtZW51LWJ1dHRvblwiKTtcblx0aWYgKGFyZ3Mub2JqZWN0LmFuZHJvaWQpIHtcblx0XHR2YXIgY29tcGF0ID0gPGFueT5hbmRyb2lkLnN1cHBvcnQudjQudmlldy5WaWV3Q29tcGF0O1xuXHRcdHZhciBiYXNlRWxldmF0aW9uID0gT1ZFUkxBWV9FTEVWQVRJT04gKiB1dGlscy5sYXlvdXQuZ2V0RGlzcGxheURlbnNpdHkoKSArIDEwMDA7XG5cdFx0dmFyIHNldEVsZXZhdGlvbiA9ICh2aWV3LCBlbGV2KSA9PiB7XG5cdFx0XHRjb21wYXQuc2V0RWxldmF0aW9uKHZpZXcuYW5kcm9pZCwgZWxldik7XG5cdFx0fVxuXHRcdFxuXHRcdHNldEVsZXZhdGlvbihtZW51QnV0dG9uLCA0ICogdXRpbHMubGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCkgKyAxKTtcblx0XHRcblx0XHRzZXRFbGV2YXRpb24obWVudUJhY2tncm91bmQsIGJhc2VFbGV2YXRpb24pO1xuXHRcdHNldEVsZXZhdGlvbihtZW51RG90cywgYmFzZUVsZXZhdGlvbiArIDEpO1xuXHRcdHNldEVsZXZhdGlvbih0aXRsZSwgYmFzZUVsZXZhdGlvbiArIDEpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3ZXJDbG9zZWQoYXJncykge1xuICAgIHZhciBkcmF3ZXIgPSBhcmdzLm9iamVjdDtcbiAgICBkcmF3ZXIuZ2VzdHVyZXNFbmFibGVkID0gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3ZXJMb2FkZWQoYXJncykge1xuXHR2YXIgZHJhd2VyID0gYXJncy5vYmplY3Q7XG4gICAgZHJhd2VyLmdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xuXHRpZiAoIWRyYXdlci5hdXRvQ2xvc2VBc3NpZ25lZCkge1xuXHRcdGRyYXdlci5hdXRvQ2xvc2VBc3NpZ25lZCA9IHRydWU7XG5cdFx0ZHJhd2VyLnBhZ2Uub24oXCJuYXZpZ2F0ZWRGcm9tXCIsIChhcmdzKSA9PiB7XG5cdFx0XHRkcmF3ZXIuY2xvc2VEcmF3ZXIoKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZiAoZHJhd2VyLmlvcykge1xuXHRcdFx0ZHJhd2VyLmlvcy5kZWZhdWx0U2lkZURyYXdlci5zdHlsZS5zaGFkb3dNb2RlID0gVEtTaWRlRHJhd2VyU2hhZG93TW9kZS5US1NpZGVEcmF3ZXJTaGFkb3dNb2RlU2lkZURyYXdlcjtcblx0XHRcdGRyYXdlci5pb3MuZGVmYXVsdFNpZGVEcmF3ZXIuc3R5bGUuZGltT3BhY2l0eSA9IDAuMztcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhY2tUYXAoYXJncykge1xuXHRjb25zb2xlLmxvZyhcImJhY2tcIik7XG5cdG5hdmlnYXRvci5uYXZpZ2F0ZUJhY2tGcm9tRXhhbXBsZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mb3JtYXRpb25UYXAoYXJncykge1xuXHRjb25zb2xlLmxvZyhcImluZm9cIik7XG5cdG5hdmlnYXRvci5uYXZpZ2F0ZVRvRXhhbXBsZUluZm8oYXJncy5vYmplY3QuYmluZGluZ0NvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29kZVRhcChhcmdzKSB7XG5cdGNvbnNvbGUubG9nKFwiY29kZVwiKTtcblx0bmF2aWdhdG9yLm5hdmlnYXRlVG9Db2RlKGFyZ3Mub2JqZWN0LmJpbmRpbmdDb250ZXh0LmV4YW1wbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmVlZGJhY2tUYXAoYXJncykge1xuXHRjb25zb2xlLmxvZyhcImZlZWRiYWNrXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldlRhcChhcmdzKSB7XG5cdGNvbnNvbGUubG9nKFwicHJldlwiKTtcblx0bmF2aWdhdG9yLm5hdmlnYXRlVG9QcmV2RXhhbXBsZShhcmdzLm9iamVjdC5iaW5kaW5nQ29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0VGFwKGFyZ3MpIHtcblx0Y29uc29sZS5sb2coXCJwcmV2XCIpO1xuXHRuYXZpZ2F0b3IubmF2aWdhdGVUb05leHRFeGFtcGxlKGFyZ3Mub2JqZWN0LmJpbmRpbmdDb250ZXh0KTtcbn1cbiJdfQ==