var observable = require("data/observable");
var utils = require("utils/utils");
var navigator = require("../../common/navigator");
var page;

function rootGridLoaded(args) {
    var grid = args.object;
    if (grid.android) {
        var compat = android.support.v4.view.ViewCompat;
        if (compat.setElevation) {
            // Fix for the elevation glitch of the tab-view
            compat.setElevation(grid.android, 4 * utils.layout.getDisplayDensity());
        }
    }
}
exports.rootGridLoaded = rootGridLoaded;
// TODO: This should be in "pageNavigatingTo" but that method is defined in the Page base class
function pageNavigatingTo(args) {
    page = args.object;
    page.bindingContext = new observable.Observable({
        selectedIndex: 0
    });
    selectedIndexChanged(null);
}
exports.pageNavigatingTo = pageNavigatingTo;

function goBack(args) {
    navigator.navigateBackFromExample();
}
exports.goBack = goBack;

function selectedIndexChanged(args) {
    if (page !== undefined) {
        var tabView = page.getViewById("tabView");
        var index = tabView.selectedIndex;
        var names = ["btn-red", "btn-yellow", "btn-blue", "btn-lightblue", "btn-lightgreen"];
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            var view = page.getViewById("" + index + name_1);
            if (view !== undefined) {
                view.className = name_1;
                view.className = name_1 + "-animated";
            }
        }
    }
}
exports.selectedIndexChanged = selectedIndexChanged;

function buttonTap(args) {
    var button = args.object;
    var className = button.className.replace("-animated", "").replace("2", "");
    button.className = className;
    button.className = className + "-animated2";
}
exports.buttonTap = buttonTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0cy1leGFtcGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGF5b3V0cy1leGFtcGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRDQUErQztBQUUvQyxtQ0FBc0M7QUFHdEMsa0RBQW9EO0FBSXBELElBQUksSUFBVSxDQUFDO0FBRWYsd0JBQStCLElBQTBCO0lBQ3JELElBQUksSUFBSSxHQUEwQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTlDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxNQUFNLEdBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNyRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0QiwrQ0FBK0M7WUFDL0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztRQUM1RSxDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFWRCx3Q0FVQztBQUVELCtGQUErRjtBQUMvRiwwQkFBaUMsSUFBMEI7SUFDdkQsSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDNUMsYUFBYSxFQUFFLENBQUM7S0FDbkIsQ0FBQyxDQUFDO0lBQ0gsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQU5ELDRDQU1DO0FBRUQsZ0JBQXVCLElBQUk7SUFDdkIsU0FBUyxDQUFDLHVCQUF1QixFQUFFLENBQUM7QUFDeEMsQ0FBQztBQUZELHdCQUVDO0FBRUQsOEJBQXFDLElBQUk7SUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBd0IsU0FBUyxDQUFDLENBQUM7UUFDakUsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNsQyxJQUFJLEtBQUssR0FBRyxDQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBRSxDQUFDO1FBQ3ZGLEdBQUcsQ0FBQyxDQUFhLFVBQUssRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLO1lBQWpCLElBQUksTUFBSSxjQUFBO1lBQ1QsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBTyxFQUFFLEdBQUcsS0FBSyxHQUFHLE1BQUksQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQUksQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFJLEdBQUcsV0FBVyxDQUFDO1lBQ3hDLENBQUM7U0FDSjtJQUNMLENBQUM7QUFDTCxDQUFDO0FBYkQsb0RBYUM7QUFFRCxtQkFBMEIsSUFBMEI7SUFDaEQsSUFBSSxNQUFNLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsR0FBRyxZQUFZLENBQUM7QUFDaEQsQ0FBQztBQUxELDhCQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9ic2VydmFibGUgPSByZXF1aXJlKFwiZGF0YS9vYnNlcnZhYmxlXCIpO1xyXG5pbXBvcnQgZ3JpZE1vZHVsZSA9IHJlcXVpcmUoXCJ1aS9sYXlvdXRzL2dyaWQtbGF5b3V0XCIpO1xyXG5pbXBvcnQgdXRpbHMgPSByZXF1aXJlKFwidXRpbHMvdXRpbHNcIik7XHJcbmltcG9ydCB7UGFnZX0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHtDb2xvcn0gZnJvbSBcImNvbG9yXCI7XHJcbmltcG9ydCAqIGFzIG5hdmlnYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL25hdmlnYXRvclwiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xyXG5pbXBvcnQgdGFiVmlld01vZHVsZSA9IHJlcXVpcmUoXCJ1aS90YWItdmlld1wiKTtcclxuXHJcbmxldCBwYWdlOiBQYWdlO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvb3RHcmlkTG9hZGVkKGFyZ3M6IG9ic2VydmFibGUuRXZlbnREYXRhKSB7XHJcbiAgICB2YXIgZ3JpZCA9IDxncmlkTW9kdWxlLkdyaWRMYXlvdXQ+YXJncy5vYmplY3Q7XHJcblxyXG4gICAgaWYgKGdyaWQuYW5kcm9pZCkge1xyXG4gICAgICAgIHZhciBjb21wYXQgPSA8YW55PmFuZHJvaWQuc3VwcG9ydC52NC52aWV3LlZpZXdDb21wYXQ7XHJcbiAgICAgICAgaWYgKGNvbXBhdC5zZXRFbGV2YXRpb24pIHtcclxuICAgICAgICAgICAgLy8gRml4IGZvciB0aGUgZWxldmF0aW9uIGdsaXRjaCBvZiB0aGUgdGFiLXZpZXdcclxuICAgICAgICAgICAgY29tcGF0LnNldEVsZXZhdGlvbihncmlkLmFuZHJvaWQsIDQgKiB1dGlscy5sYXlvdXQuZ2V0RGlzcGxheURlbnNpdHkoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPOiBUaGlzIHNob3VsZCBiZSBpbiBcInBhZ2VOYXZpZ2F0aW5nVG9cIiBidXQgdGhhdCBtZXRob2QgaXMgZGVmaW5lZCBpbiB0aGUgUGFnZSBiYXNlIGNsYXNzXHJcbmV4cG9ydCBmdW5jdGlvbiBwYWdlTmF2aWdhdGluZ1RvKGFyZ3M6IG9ic2VydmFibGUuRXZlbnREYXRhKSB7XHJcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XHJcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IG9ic2VydmFibGUuT2JzZXJ2YWJsZSh7XHJcbiAgICAgICAgc2VsZWN0ZWRJbmRleDogMFxyXG4gICAgfSk7XHJcbiAgICBzZWxlY3RlZEluZGV4Q2hhbmdlZChudWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdvQmFjayhhcmdzKSB7XHJcbiAgICBuYXZpZ2F0b3IubmF2aWdhdGVCYWNrRnJvbUV4YW1wbGUoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGVkSW5kZXhDaGFuZ2VkKGFyZ3MpIHtcclxuICAgIGlmIChwYWdlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsZXQgdGFiVmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQ8dGFiVmlld01vZHVsZS5UYWJWaWV3PihcInRhYlZpZXdcIik7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGFiVmlldy5zZWxlY3RlZEluZGV4O1xyXG4gICAgICAgIGxldCBuYW1lcyA9IFsgXCJidG4tcmVkXCIsIFwiYnRuLXllbGxvd1wiLCBcImJ0bi1ibHVlXCIsIFwiYnRuLWxpZ2h0Ymx1ZVwiLCBcImJ0bi1saWdodGdyZWVuXCIgXTtcclxuICAgICAgICBmb3IgKGxldCBuYW1lIG9mIG5hbWVzKSB7XHJcbiAgICAgICAgICAgIGxldCB2aWV3ID0gcGFnZS5nZXRWaWV3QnlJZDxWaWV3PihcIlwiICsgaW5kZXggKyBuYW1lKTtcclxuICAgICAgICAgICAgaWYgKHZpZXcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmlldy5jbGFzc05hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgdmlldy5jbGFzc05hbWUgPSBuYW1lICsgXCItYW5pbWF0ZWRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvblRhcChhcmdzOiBvYnNlcnZhYmxlLkV2ZW50RGF0YSkge1xyXG4gICAgbGV0IGJ1dHRvbiA9IDxWaWV3PmFyZ3Mub2JqZWN0O1xyXG4gICAgbGV0IGNsYXNzTmFtZSA9IGJ1dHRvbi5jbGFzc05hbWUucmVwbGFjZShcIi1hbmltYXRlZFwiLCBcIlwiKS5yZXBsYWNlKFwiMlwiLCBcIlwiKTtcclxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICBidXR0b24uY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgXCItYW5pbWF0ZWQyXCI7XHJcbn0iXX0=
